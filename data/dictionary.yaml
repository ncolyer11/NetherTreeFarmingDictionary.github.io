
- term: Binary
  aka:
    - bin
  tags:
    - Concept
  description: >-
    An encoding where each digit of a code is either on or off (we say it has a
    binary state, usually represented with 0s and 1s). A four digit (@[Bit])
    signal could have the states 0000 or 0110 or 0100, or any other combination
    of the valid states. In terms of minecraft, this usually translates to a
    wire or a rail being on or off, a piston being extended or retracted, a note
    block being powered or unpowered, etc.

- term: Bit
  tags:
    - Concept
  description: 'Short for binary digit: the digits in a @[binary] system.'

- term: Block event delay
  aka:
    - BED
  tags:
    - Concept
  description: >-
    Block event delay usually refers to piston updating other pistons in a
    chain reaction within a single game tick. Since pistons activate during the
    block event phase of the tick (kind of) and things execute in the order
    they are scheduled, having something be activated by a piston that was
    updated by a chain of three other pistons before it (BED 3) will always
    happen before something that was activated by a BED 5 event.

- term: Block Update Detector
  aka:
    - BUD
  tags:
    - Contraption
  description: >-
    A Block Update detector is a device that has something happen when it
    receives an update. Example: A piston that is @[Quasi-powered](Quasi
    connectivity) but not yet updated is called "BUDded", and will fire when
    updated. This term is sometimes used to refer to a component that is being
    QC powered by saying it's "BUD powered".

- term: Comparator Update Detector
  aka:
    - CUD
  tags:
    - Contraption
  description: >-
    A Comparator Update Detector is based on the behavior inherent to
    comparators where they don't notice inventory changes when reading it
    through a solid block (including an inventory being moved away or put in
    place, like a composter being moved by a piston). The CUD will then change
    it's signal once it either receives a block or inventory update.

- term: Crosstalk
  tags:
    - Bad Practice
    - StorageTech Concept
  description: >-
    A term used for when 2 tiled @[Cores](Core) are interfering with each other
    in any situation. 

- term: Decoder
  tags:
    - Contraption
  description: >-
    A Decoder has two main meanings in storage tech: A contraption that
    translates code or data to item, like an encoded storage hall, the inverse
    of an @[Encoder], or one that translates code into user-readable
    information, like a display. In addition, in computational redstone it's
    sometimes used to mean increasing the size of a base, bin to hex, for
    example, see @[Transcoder].

- term: Directional
  tags:
    - Bad Practice
    - Concept
  description: >-
    A contraption is said to be directional if it exhibits a different behavior
    when rotated or mirrored.  This is usually caused by some internal component
    being directional itself, which in turn is most often caused by update
    order: each components notifies its neighbors of the update in a set order
    (for example, negative to positive z first, then negative to positive y,
    then x). There are also other causes of directionality. 

- term: Dropper speed
  aka:
    - HS
    - '1x, 2x, 1/2x, ...'
  tags:
    - Feature
  description: >-
    Similar to @[Hopper speed], but less frequently used. Refers to the speed at
    which items are processed in a dropper when clocked at the minimum interval
    (1 item every 4@[gt](gametick)). Usually written as an integer or fraction
    (e.g. "3x or 1/2x dropper speed"). 1x Dropper speed is equal to 2x @[Hopper
    speed].

- term: Dropperline
  tags:
    - Contraption
  description: A line of droppers to transport items fast.

- term: Dust updateless
  tags:
    - Feature
    - Good Practice
    - Concept
  description: >-
    Some contraptions are not @[Dustless], but the dust they use does not get
    updated (does not change @[ss](Signal Strength)). This can be because it is
    either used to steadily power a component, or because it's used by
    redirecting it, but not changing ss. Redirecting dust is really lag
    friendly, as lag usage goes. These terms are therefore often used
    interchangeably.

- term: Dustless
  tags:
    - Feature
    - Good Practice
    - Concept
  description: >-
    A contraption that makes no use of redstone dust. Redstone dust is one of
    the single most laggiest components in the game, since it gives 25 updates
    for each @[ss](Signal Strength) change. When increasing signal, it updates
    one for each increase level, so going from ss 3 to 7, for instance would
    give 100 block updates. Decreasing signal is different between versions
    1.14- and 1.15+, where in the former it happens the same way it does when
    increasing values, and in the latter, it moves by steps of two, reducing the
    amount of updates by half. In 1.15+ dust dots (single dust) update all at
    once, without stepping through intermediary ss values. A big part of the
    community also calls @[Dust updateless] contraptions Dustless, since the
    updates is the only part of the dust that lags.

- term: Encoded
  tags:
    - Concept
  description: >-
    A system is said to be encoded when a signal in the form of a code is used
    to decide the fate of items or boxes. In broader terms, it refers to
    systems that use codes to transfer instructions. Codes can be a @[Binary]
    signal, a @[Hexadecimal] signal or, less often, octal or quaternary, with
    either multiple or single digits.

- term: FPS
  aka:
    - Frames Per Second
  tags:
    - Concept
  description: >-
    A measure of how many frames a client is able to process each second.
    This is similar to, but independent of @[TPS], which denotes server-side
    performance.

- term: Gametick
  aka:
    - gt
    - tick
    - t
  tags:
    - Concept
  description: >-
    Minecraft iteratively runs its processing code in a loop. One cycle of this
    loop is called a Tick or Gametick (gt). 

    Gameticks are also used as the default measurement of time while working
    with redstone. The game attempts to run 20 gameticks a second (20tps), but
    will fail to do so and slow down the game if the server is lagging
    (>50mspt). 

    Often confused with the less technical term "redstone tick". A redstone tick
    is in practice 2gt, as its origin comes from the default setting of a
    repeater. 

    A default repeater when freshly placed is a 2gt- or one
    redstone-tick-repeater.

- term: Global/Local
  aka:
    - External Processing
  tags:
    - StorageTech Concept
  description: >-
    Annotates if a signal comes from a global system ( a "brain" ), or from
    within a @[Core]. Also known as @[External Processing].

    For example, one global timing and logic unit could send signals to 100 cores in an @n-core] 
    tree farm with a sufficient delay between each @[Core], rather than each core having its own
    timing logic/brain and causing excessively more lag.

- term: Hexadecimal
  aka:
    - Hex
  tags:
    - Concept
  description: >-
    A code where each digit of the code has 16 possible states (usually
    represented as 0 to 9 and then A to F). It's most commonly implemented with
    signal strength values, where @[ss](Signal Strength) 0 represents 0, ss10
    represents A, ss15 represents F and so on. Multiple hex signals can be
    combined to form a code with multiple digits. For example, valid three digit
    hex codes are 032, AFF, 0F4. 

- term: Hopper speed
  aka:
    - HS
    - '1x, 2x, 1/2x, ...'
  tags:
    - Feature
    - StorageTech Concept
  description: >-
    Refers to the speed at which items are processed in a hopper (1 item every
    8@[gt](gametick)). Often used as a way of quantifying speed of a system in
    terms of how many hoppers worth of items are processed in or out. Usually
    written as an integer or fraction (e.g. "3x or 1/2x hopper speed"). See
    also: @[Dropper speed].

- term: Locational
  tags:
    - Bad Practice
    - Concept
  description: >-
    A contraption is said to be locational when it exhibits different behavior
    when built in different locations in the world. This is almost always caused
    by redstone dust updates themselves being locational: the way they notify
    their neighbors of their updates is not consistent across locations in the
    world.

- term: MSPT
  aka:
    - Milliseconds Per Tick
    - ms
  tags:
    - Concept
  description: >-
    A measurement of how many milliseconds it takes to process each @[gametick].
    If a server exceeds 50MSPT in total, then the game will slow down, as there
    is no longer enough time to process all 20 @[ticks per second](tps).
    MSPT is also used as a measure of how performance-intensive a contraption
    is by seeing how much the MSPT increases by running/loading it.


- term: n-wide AB tileable
  aka:
    - '1wABt, 2wABt, ...'
    - nwABt
  tags:
    - Feature
    - Concept
  description: >-
    An extension of @[n-Wide tileable], but where a solution has been provided
    by the author on how to put 2 @[Cores](Core) of the same system next to
    each other, by moving/editing some components within the system. The capital
    letters ( AB, or ABC, or ABCD, ... ) annotate how the cores are tiled, and
    how many versions of the core exist to achieve a result.

- term: n-Wide tileable
  aka:
    - '1wt, 2wt, ...'
    - nwt
  tags:
    - Feature
    - Concept
  description: >-
    Annotates the width of a core, and whether or not you can build them right
    next to each other. There are systems that are 1 wide, but you can't put 2
    next to each other due to @[Crosstalk], so they don't get this annotation.
    Sometimes they are @[n-Wide AB Tileable] instead.

- term: Parallel codes
  tags:
    - Concept
  description: >-
    A code is said to be parallel if the all the bits of the signal are sent
    through individual wires or lines This usually allows for faster and easier
    to use codes than @[Serial codes], but it tends to be more expensive and
    bigger.

- term: Peripheral
  tags:
    - StorageTech Contraption
  description: >-
    Term used to describe contraptions that are almost Storage Tech. Examples
    are Furnace Arrays, Brewers, Crafting stations, Autocrafters, ...

- term: Pistonless
  tags:
    - Feature
    - Good Practice
  description: >-
    A contraption that makes no use of pistons. This is to reduce @[client-side
    lag](fps) due to tile entities in 1.16+ and general server-side lag, since each
    piston has to check all the @[Tile Entities](Tile Entity) in the world each
    time it tries to extend, and storage systems tend to have a lot of TEs. This
    effect is partly mitigated in 1.17+ and greatly mitigated by the Lithium mod.

- term: Quasi connectivity
  aka:
    - QC
  tags:
    - Concept
  description: >-
    The effect of quasi-powering a piston, dropper or dispenser. A good way to
    visualise when a block is being quasi-powering is to imagine a redstone lamp
    above the component. If that lamp was to be on in that location, the block
    is quasi-powered. Quasi-powering usually doesn't update the component being
    QCed, which results in the component not "realising" it should activate or
    deactivate until it receives an update. For this reason, QC is often  used
    for @[Block Update Detector], and people even sometimes say "BUD powered"
    rather than "quasi powered".

- term: Serial codes
  tags:
    - Concept
  description: >-
    A code is said to be serial if the bits of the signal are sent one after the
    other through a single wire. This is more space and resource efficient than
    @[Parallel codes], but usually slower and harder to implement.

- term: Silent
  tags:
    - Feature
  description: >-
    A contraption that does not make noise when activated. Sources of noise are:
    pistons, uncovered note blocks, trapdoors, doors and fence gates, and
    droppers or dispensers failing to fire. Silent contraptions usually avoid
    all of those.

- term: Core
  tags:
    - Concept 
  description: A repeatable ( Preferably tileable ) component within a system. In relation to 
    nether tree farming, it's a part of the farm that typically involves pistons surrounding a 
    single nylium block to extract blocks generated from the fungus and move them into a blast 
    chamber. For @[Playerless] farms, it consists of dispensers facing into a nylium platform.

- term: Solid state
  tags:
    - Feature
  description: >-
    A contraption that has no moving parts or, more loosely, that has no pistons
    spitting blocks, or other forms of @[Toggle state]. This term is also
    sometimes interchangeably used with @[Pistonless], although you can have a
    solid state contraption (in the loose way) with pistons by having them never
    spit out the block, i.e. powering them with long pulses only.

- term: ss
  tags:
    - Concept
  description: Abbreviation for redstone dust/comparator Signal Strength

- term: Tile Entity
  aka:
    - Block Entity
    - TE
    - BE
  tags:
    - Concept
  description: >-
    Tile entities (less often referred to as Block Entities) are blocks that
    have NBT-data attached to them, for example all blocks with inventories.

    More information on the [block entity wiki page](https://minecraft.wiki/w/Block_entity)

- term: Tile Tick Priority
  aka:
    - ttp
  tags:
    - Concept
  description: >-
    Usually used when referring to pointing Comparators in
    @[Dropperlines](Dropperline) into repeaters/comparators increase the
    priority of the comparator and allow it to actually notice that an item is
    coming through

- term: Togglestate
  aka:
    - Toggle state
  tags:
    - Bad Practice
    - Concept
  description: >-
    Usually used to refer to intentionally having sticky piston's drop its block
    by sending it a <3gt pulse in order to cycle between two different states
    (toggling between block in and out).

    Importantly, togglestates have no default position, and there is no way to
    reset them. This makes them painful to use in survival as they're hard to
    debug.

    This is different to latches, which are also systems that hold state.
    Latches usually have a reset signal that you can trigger when something goes
    wrong.

- term: TPS
  aka:
    - Ticks per second
  tags:
    - Concept
  description: >-
    A measurement of how many @[gametick]s are happening each second. The game
    normally operates at 20TPS, but if @[MSPT] exceeds 50ms then the game will
    start to slow down. Mods such as Carpet Mod are able to stop, slow down, 
    or speed up the tick speed of a server, which can be useful for testing.

- term: User interface
  aka:
    - UI
  tags:
    - Concept
  description: >-
    User interface. The part of a contraption or system that the end user
    interacts with, regardless of the inner workings of the system.

- term: Stemlight
  tags:
    - Software
    - Tools
  description: >-
    A collection of huge fungi/nether tree farm related calculators and simulators combined under the alias 'Stemlight'.
    Is widely used for optimising nether tree farm layouts to reach the highest theoretical level of stem and/or shroomlight output whilst maintaining self-sustainability. Also used in researching the interplay between the many interoperating mechanisms in a playerless nether tree farm core, and displaying charts on a variety of nether tree farm statistics and phenomena.

- term: Hysteresis
  aka:
    - Schmitt Trigger
  tags:
    - Component
  description: >-
    Hysteresis circuits are used to buffer a certain amount of an input item, e.g. fungi or bone 
    meal, to always maintain a sufficient supply of that item to a farm. As the buffer begins to 
    empty, an output signal will be sent to a larger source of that input item, e.g. a fungi farm or 
    bone meal decrafter, to provide more of that input item, switching off once the buffer fills up 
    again.

- term: NAPP
  aka:
    - ROPP
  tags:
    - Mechanic
  description: >-
    Non Arbitrary Piston Placement, mainly used to harvest a specific region of a huge fungus. This is sometimes referred to as Region Orientated Piston Placement (ROPP), which means the same thing.

- term: Self-sustainable
  tags:
    - Sustainability
  description: >-
    Produces at least 100% of the bonemeal it consumes without external support, using only the byproducts of wart blocks and nether foliage.

- term: Externally Self-sustainable
  tags:
    - Sustainability
  description: >-
    Produces at least 100% of the bonemeal it consumes, including from external sources such as moss or cactus-based bonemeal farms.

- term: Non Self-sustainable
  tags:
    - Sustainability
  description: >-
    Produces less than 100% of the bonemeal it consumes.

- term: Playerful
  tags:
    - Mode
  description: >-
    A farm that requires a player to operate. It may or may not be self-sustainable.

- term: Playerless
  tags:
    - Mode
  description: >-
    A farm that can operate without a player. It may or may not be self-sustainable.

- term: Cycle Speed
  tags:
    - Metric
  description: >-
    The time it takes for the @[Core] to reset and process one fungus growth, typically measured in game ticks (e.g., 4gt core).

- term: Single-core
  tags:
    - Design
  description: >-
    A farm with a single planting nylium block and one @[Core], or a single nylium platform for playerless designs.

- term: Dual-core
  tags:
    - Design
  description: >-
    A farm with two nylium blocks and two @[Cores](Core), often achieved by using trapdoors to place fungus behind and in front of the player, or placing fungus in a 1x2 area of nylium.

- term: Multi-core
  tags:
    - Design
  description: >-
    A design with multiple @[Cores](Core) within reach of the player, using specific configurations to prevent intersecting wart blocks between cores. For playerless farms, this involves spacing or tiling multiple cores.

- term: n-core
  tags:
    - Design
  description: >-
    A design with 'n' (usually n ≫1) @[Single-core] tileable modules that the player moves between as fast as possible, spaced for efficient harvesting. For @[Playerless] designs, this involves tiling 'n' @[Cores](Core).

- term: VUNTF
  tags:
    - Design
  description: >-
    Versatile Universal Nether Tree Farm, capable of harvesting both types of nether trees, mushrooms, and > 5 normal trees (oak, azalea, birch, spruce, acacia, jungle, cherry, mangrove).

- term: Layer Value Sets (LVS)
  tags:
    - Metric
  description: >-
    An array of integers describing the radius of a hat at each layer. For example, a hat height of 6 could give [2,2,2,2,1,2,1]. Can be extended to include the trunk by adding 0's between layer 1 and where the hat starts
  
- term: Nylium Replenishers
  tags:
    - Mechanic
  description: >-
    As nylium can decay into netherrack if random ticked while an opaque block is above it, a system is needed to replenish the netherrack and convert it back to nylium.
    To convert netherrack into nylium, a nylium block must be within a 1-cubed radius, and bonemeal must be applied to the netherrack. The type of nylium produced is determined by the distribution of surrounding nylium.

- term: External Processing
  tags:
    - Optimisation
  description: >-
    Placing the clock and/or other vital components for a module (usually b36 TNT) outside the module's volume, allowing you to trigger multiple stacked modules from a single universal clock.
    This reduces materials cost and lag compared to triggering each module individually.

- term: Auxiliary Processing
  tags:
    - Optimisation
  description: >-
    Modules (usually b36 TNT) that function independently but benefit from additional components placed outside their volume. 
    These benefits can include faster clock speed, additional customisability (e.g., different modes), and lag optimisation.

- term: Vines Region Manipulation (VRM)
  tags:
    - Mechanic
  description: >-
    Exploits the fact that when generating the vines region, the game checks if a wart block is beneath the block it's about to generate.
    By preplacing wart blocks of the right variant, you can force the vines region to generate at 100% (if the hat and trunk height are the right size).
    Explained further [by ncolyer here](https://youtu.be/gTH35drzX5Y?t=21) 

- term: b36 TNT
  tags:
    - Mechanic
  description: |
    Trapping TNT in a moving piston (block 36) reduces entity damage down to 1 while still allowing the TNT blast to damage blocks. 
    There are three main methods for positioning b36 TNT:

    1. **Padded**: Shields the TNT blast using generated blocks (e.g., basalt or cobblestone) behind the TNT to protect the module.

    2. **Insertion**: Uses a blast-resistant block (e.g., ancient debris or waterlogged stair) behind the TNT to protect the module.

    3. **Bridged**: A two-block-high bridge where the TNT rests on the bottom layer and is pushed by the top layer, allowing it to extend multiple blocks from the module.

    Explanation video by [Sergent Patate](https://www.youtube.com/watch?v=6gi-DGF8Y4g)

- term: Obsidy Tube
  tags:
    - Mechanic
  description: >-
    Detonates TNT inside an obsidian tube, allowing blast rays to escape only through the corners, reducing entity damage to 1.
    The downside is that blocks directly adjacent to the TNT in the cardinal directions won't be damaged as the obsidian blocks the rays.

- term: Growth Dispenser
  tags:
    - Component
  description: >-
    A dispenser that aims above a nylium block to grow a player planted, or nylium generated, fungus.

- term: Nylium Dispenser
  tags:
    - Component
  description: >-
    A dispenser that aims into a nylium block to grow nether foliage there, including the desired fungus type.
    Note that these will fail to dispenser bone meal onto the nylium if there is already a foliage block on top of the nylium.

- term: Cleared Dispenser
  tags:
    - Component
  description: >-
    A nylium dispenser that has a clocked piston above the nylium block it's facing into so the nylium dispenser is never obstructed and always able to bone meal. Note, the dispenser can still be obstructed if it doesn't have first priority amongst a group of other nylium dispensers.

- term: Blocked Block
  tags:
    - Component
  description: >-
    A block in a nylium platform in a playerless core that doesn't have any foiliage generating at it due to either being obstructed by another block, or there being no nylium there at all for foliage to generate at.

- term: Trunk
  tags:
    - Component
  description: >-
    The "trunk" of a huge fungus refers to the region where stems generate, the Trunk Region.

- term: Hat
  tags:
    - Component
  description: >-
    The "hat" of a huge fungus refers to the top area where wart blocks and shroomlights generate. It is analogous to the "leaves" of the fungus.

- term: Regions
  tags:
    - Component
  description: >-
    The various parts that make up a nether tree, including the Internal, External, Corner, and Trunk Regions, as well as 3 separate Vines Layers.
    In total, there are 336 possible orientations (332 unique) of these regions (bounding boxes) that can generate.
